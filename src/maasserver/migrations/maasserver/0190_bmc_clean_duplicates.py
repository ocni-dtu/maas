# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2019-08-08 08:19
from __future__ import unicode_literals

from django.contrib.postgres.aggregates import ArrayAgg
from django.db import migrations
from django.db.models.aggregates import Count


NON_CHASSIS_POWER_TYPES = ("amt", "ipmi", "openbmc", "wedge")


def clean_bmcs(apps, schema_editor):
    BMC = apps.get_model("maasserver", "BMC")
    Node = apps.get_model("maasserver", "Node")

    # delete BMCs that are not linked to any node
    BMC.objects.exclude(
        id__in=Node.objects.values("bmc_id")
    ).distinct().delete()

    # find duplicated BMCs and remove them, moving nodes to the only one left
    # for each group
    bmc_ids_to_delete = []

    qs = BMC.objects.values("power_type", "power_parameters")
    qs = qs.exclude(power_type="manual")
    qs = qs.annotate(ids=ArrayAgg("id")).annotate(count=Count("id"))
    qs = qs.filter(count__gt=1)
    for entry in qs:
        bmc_ids = entry["ids"]
        bmc_id = bmc_ids.pop()
        Node.objects.filter(bmc_id__in=bmc_ids).update(bmc_id=bmc_id)
        bmc_ids_to_delete.extend(bmc_ids)

    if bmc_ids_to_delete:
        BMC.objects.filter(id__in=bmc_ids_to_delete).delete()

    # find non-chassis BMCs that are linked to multiple nodes.  Such cases are
    # not valid, so we unset the BCM for all nodes except one, so BMC
    # parameters (such as user/password) are not lost. Users will likely have
    # to fix those node manually anyway.
    qs = BMC.objects.values("id")
    qs = qs.filter(power_type__in=NON_CHASSIS_POWER_TYPES)
    qs = qs.annotate(node_ids=ArrayAgg("node"), node_count=Count("node"))
    qs = qs.filter(node_count__gt=1)
    node_ids_to_unset = []
    for entry in qs:
        node_ids = entry["node_ids"]
        node_ids.pop()  # keep one node with the original
        node_ids_to_unset.append(node_ids)

    if node_ids_to_unset:
        Node.objects.filter(id__in=node_ids_to_unset).update(bmc_id=None)


class Migration(migrations.Migration):

    dependencies = [("maasserver", "0189_staticipaddress_temp_expires_on")]

    operations = [migrations.RunPython(clean_bmcs)]
